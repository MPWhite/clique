// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  url      = "postgres://fpvhxsubvamtgo:0591d06251351cb69d7ea32321a87019cb1f1155152422b867570ad744e0b18d@ec2-3-224-8-189.compute-1.amazonaws.com:5432/d8gjv0rtco7bqj"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://fpvhxsubvamtgo:0591d06251351cb69d7ea32321a87019cb1f1155152422b867570ad744e0b18d@ec2-3-224-8-189.compute-1.amazonaws.com:5432/d8gjv0rtco7bqj"
}

model Server {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  creator          User               @relation("ServerCreator", fields: [creatorId], references: [id])
  creatorId        String             @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // Prisma specific bullshit
  ServerMembership ServerMembership[]
  Post             Post[]
  Comment          Comment[]
  Invitation       Invitation[]
  Approval         Approval[]
}

model User {
  id                 String             @id @default(uuid()) @db.Uuid
  displayName        String             @unique
  // Don't worry! It's hashed!
  password           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  Inviation          Invitation?        @relation("Invite", fields: [invitationId], references: [id])
  invitationId       String?            @unique @db.Uuid
  // Prisma specific bullshit
  ServersCreated     Server[]           @relation("ServerCreator")
  ServerMembership   ServerMembership[]
  Post               Post[]
  Comment            Comment[]
  CreatedInvitations Invitation[]       @relation("InviteCreator")
  Approval           Approval[]
}

model ServerMembership {
  id        String   @id @default(uuid()) @db.Uuid
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  server    Server    @relation(fields: [serverId], references: [id])
  serverId  String    @db.Uuid
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.Uuid
  link      String
  title     String
  createdAt DateTime  @default(now())
  // Prisma specific bullshit
  Comments  Comment[]
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  server    Server    @relation(fields: [serverId], references: [id])
  serverId  String    @db.Uuid
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.Uuid
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @db.Uuid
  parent    Comment?  @relation("Parent", fields: [parentId], references: [id])
  parentId  String?   @db.Uuid
  body      String
  createdAt DateTime  @default(now())
  // Prisma specific bullshit
  children  Comment[] @relation("Parent")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  USED
}

// How the fuck do i link this to a user that has not been made yet?
model Invitation {
  id                    String           @id @default(uuid()) @db.Uuid
  server                Server           @relation(fields: [serverId], references: [id])
  serverId              String           @db.Uuid
  creator               User             @relation("InviteCreator", fields: [creatorId], references: [id])
  creatorId             String           @db.Uuid
  inviteUserDisplayName String           @unique
  socialProofLink       String
  code                  String
  status                InvitationStatus
  Receiver              User?            @relation("Invite")
  // Prisma shit
  Approvals             Approval[]
  createdAt             DateTime         @default(now())
}

model Approval {
  id           String     @id @default(uuid()) @db.Uuid
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId String     @db.Uuid
  server       Server     @relation(fields: [serverId], references: [id])
  serverId     String     @db.Uuid
  approver     User       @relation(fields: [approverId], references: [id])
  approverId   String     @db.Uuid
  createdAt    DateTime   @default(now())
}
